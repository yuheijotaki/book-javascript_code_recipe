/**********
* 114 ユーザーの操作が起こったときに処理を行いたい
**********/
// 要素の参照を取得する
const button = document.querySelector('.button');

// アロー関数を使う方法
button.addEventListener('click', () => {
  console.log(`ボタンがクリックされました`);
});

// function宣言を使う方法
button.addEventListener('click', function () {
  console.log(`ボタンがクリックされました`);
});

// 関数名を指定する方法
button.addEventListener('click', onClickButton);
function onClickButton() {
  console.log(`ボタンがクリックされました`);
}

// イベントの情報を取得する
button.addEventListener('click', (event) => {
  // クリックされたボタン要素が出力される
  console.log(event.target);
});

/**********
* 115 イベントリスナーを一度だけ呼び出したい
**********/
// オプションを指定
const option = {
  once: true
};

document
  .querySelector('.button')
  .addEventListener('click', onClickButton, option);

function onClickButton() {
  alert('ボタンが押されました。');
}

/**********
* 117 ページが表示されたときに処理をしたい
**********/
// DOMにアクセスするタイミングで処理を実行する
window.addEventListener('DOMContentLoaded', () => {
  // .box の要素数を取得する
  const boxNum = document.querySelectorAll('.box').length;
  // ログを出力
  console.log(`.box要素の数は${boxNum}です`);
});

/**********
* 118 クリック時に処理をしたい
**********/

/**********
* 119 マウスを押したときや動かしたときに処理をしたい
**********/

/**********
* 120 マウスオーバー時に処理をしたい
**********/

/**********
* 121 マウスオーバー時に処理をしたい（バブリングあり）
**********/

/**********
* 122 マウス操作時の座標を取得したい
**********/

/**********
* 123 スクロール時に処理をしたい
**********/

/**********
* 124 テキスト選択時に処理をしたい
**********/

/**********
* 125 タッチ操作時に処理をしたい
**********/

/**********
* 126 タッチ操作時のイベントの発生情報を取得したい
**********/

/**********
* 127 キーボード入力時に処理をしたい
**********/

/**********
* 128 入力されたキーを調べたい
**********/

/**********
* 129 タブがバックグラウンドになったときに処理をしたい
**********/

/**********
* 130 画面サイズが変更になったときに処理をしたい
**********/

/**********
* 131 画面サイズがブレークポイントを超えたときに処理をしたい
**********/

/**********
* 132 イベントを発火させたい
**********/

/**********
* 133 デフォルトのイベントをキャンセルしたい
**********/

/**********
* 134 ドラッグアンドドロップを取り扱いたい
**********/
